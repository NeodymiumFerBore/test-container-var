name: Docker
on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ndfeb/testing

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      # output env vars because next job needs them somewhere where env context is not available
      image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      image_tag: ${{ steps.vars.outputs.sha_short }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # We will use this value for our tag: save it as output
      - name: Compute short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}
          labels: ${{ steps.meta.outputs.labels }}

  test:
    runs-on: ubuntu-latest
    needs: build
    container:
      image: ${{ needs.build.outputs.image }}:${{ needs.build.outputs.image_tag }}
    steps:
      - name: Check test.txt is here
        run: ls -l /
      
      - name: Retrieve file content
        run: echo "FILE_CONTENT=$(cat /test.txt)" >> $GITHUB_OUTPUT
      
      - name: Assert that file content is equal to the image tag
        run: test "${{ env.FILE_CONTENT }}" == "${{ needs.build.outputs.image_tag }}"
